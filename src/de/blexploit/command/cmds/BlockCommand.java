package de.blexploit.command.cmds;

import java.util.ArrayList;

import org.bukkit.ChatColor;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerCommandPreprocessEvent;

import api.Fehler;
import de.blexploit.command.Command;
import de.blexploit.players.create.MittrollerEntity;

public final class BlockCommand extends Command implements Listener {

	private ArrayList<String> blockedCmds = new ArrayList<String>();

	public BlockCommand() {
		super("blockcommand", "Blockiert Befehle", "add/remove/list/clear", "Befehl");
	}

	@Override
	public void run(String[] args, MittrollerEntity mt) {
		if (args.length > 1) {
			switch (args[1].toLowerCase()) {
			case "add":
				this.add(mt, args);
				break;
			case "remove":
				this.remove(mt, args);
				break;
			case "list":
				this.list(mt);
				break;
			case "clear":
				this.clear(mt);
				break;
			default:
				break;
			}
		} else {
			mt.fehler(Fehler.ARGUMENT_EXCEPTION);
			mt.benutze(this);
		}
	}
	
	private void clear(MittrollerEntity mt) {
		this.blockedCmds.clear();
		this.SpielerInfo(mt, "hat alle geblockten Befehl entfernt.");
	}

	private void list(MittrollerEntity mt) {
		mt.getPlayer().sendMessage("");
		mt.getPlayer().sendMessage("§9-----------------------------------------------------");
		mt.sendMessage(ChatColor.GOLD + "Insgesamt " + ChatColor.YELLOW + this.blockedCmds.size() + ChatColor.GOLD
				+ " Blocktierte Befehle:");
		int i = 0;
		for (String mtall : this.blockedCmds) {
			i++;
			ChatColor c = ChatColor.DARK_GREEN;

			mt.sendMessage("§4[" + ChatColor.LIGHT_PURPLE + i + "§4] " + c + mtall);
		}
		mt.getPlayer().sendMessage("§9-----------------------------------------------------");
	}

	private void remove(MittrollerEntity mt, String[] args) {
		if (args.length == 3) {
			if (args[2].startsWith("/")) {
				if (!this.blockedCmds.contains(args[2])) {
					mt.fehler("Dieser Befehl wurde nicht eingetragen.");
					return;
				}
				this.blockedCmds.remove(args[2]);
				this.SpielerInfo(mt, "hat den Befehl " + ChatColor.GOLD + "/" + args[2] + CHAT_COLOR + " entsperrt.");
			} else {
				mt.fehler("Der Befehl muss mit einem \"/\" starten!");
			}
		} else {
			mt.fehler(Fehler.ARGUMENT_EXCEPTION);
			mt.benutze(this);
		}
	}

	private void add(MittrollerEntity mt, String[] args) {
		if (args.length == 3) {
			if (args[2].startsWith("/")) {
				if (this.blockedCmds.contains(args[2])) {
					mt.fehler("Dieser Befehl wurde schon eingetragen.");
					return;
				}
				this.blockedCmds.add(args[2]);
				this.SpielerInfo(mt, "hat den Befehl " + ChatColor.GOLD + args[2] + CHAT_COLOR + " gesperrt.");
			} else {
				mt.fehler("Der Befehl musst mit einem \"/\" starten!");
			}
		} else {
			mt.fehler(Fehler.ARGUMENT_EXCEPTION);
			mt.benutze(this);
		}
	}

	@EventHandler
	private void onCommand(final PlayerCommandPreprocessEvent e) {
		try {
			String Befehl = e.getMessage().split(" ")[0];
			if (this.blockedCmds.contains(Befehl)) {
				e.setMessage("." + e.getMessage());
			}
		} catch (Exception e2) {
		}
	}

}
