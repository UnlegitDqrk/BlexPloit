package de.blexploit.command.cmds.search;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

import org.apache.commons.lang.StringUtils;

import api.Fehler;
import api.fanciful.mkremins.fanciful.FancyMessage;
import de.blexploit.Start;
import de.blexploit.command.Command;
import de.blexploit.command.CommandManager;
import de.blexploit.inventory.creator.InvItem;
import de.blexploit.inventory.creator.InvItemManager;
import de.blexploit.players.create.MittrollerEntity;

public final class Search extends Command {

	public Search() {
		super("s", "Suche nach Items oder Befehlen", "keyword", null);
	}

	final private String suchPrefix = "§6---------[ §eBLEXPLOIT §bSuche §6]---------";

	@Override
	public void run(final String[] args, final MittrollerEntity mt) {
		if (args.length > 1) {
			final String input = api.Get.nextArgs(args, 1);
			final ArrayList<ContainsObj> rangliste = this.sortArray(input);
			mt.getPlayer().sendMessage("\n\n" + this.suchPrefix);
			for (int i = 0; i < 8; i++) {
				final String numberMessage = "§c[§6" + (i + 1) + "§c] ";
				final ContainsObj cmdobj = rangliste.get(i);
				final Object cmd = cmdobj.getObj();
				if (cmd instanceof Command) {
					this.sendCommand((Command) cmd, numberMessage, mt);
				}
				if (cmd instanceof InvItem) {
					this.sendItem((InvItem) cmd, numberMessage, mt);
				}
			}
			mt.getPlayer().sendMessage(this.suchPrefix);

		} else {
			mt.fehler(Fehler.ARGUMENT_EXCEPTION);
			mt.benutze(this);
		}
	}

	private void sendItem(final InvItem cmd, final String numMsg, final MittrollerEntity mt) {
		final FancyMessage fm = new FancyMessage(numMsg + " §bItem: §d" + cmd.getDisplayname());
		String itemLore = String.join("\n", cmd.getRealItemStack().getItemMeta().getLore());
		fm.tooltip(cmd.getRealItemStack().getItemMeta().getDisplayName(),itemLore);
		fm.suggest(Start.Befehlzeichen + "itm " + cmd.getDisplayname().replace(" ", "_"));
		fm.send(mt.getPlayer());
	}

	private void sendCommand(final Command cmd, final String numMsg, final MittrollerEntity mt) {
		final FancyMessage fm = new FancyMessage(numMsg + " §aCommand: §d" + cmd.getCommand());
		fm.tooltip("§b" + cmd.getBeschreibung(),
				"§cKlicke hier;§cund führe den Command aus");
		fm.suggest(Start.Befehlzeichen + cmd.getCommand());
		fm.send(mt.getPlayer());
	}

	private ArrayList<ContainsObj> sortArray(final String input) {
		final ArrayList<ContainsObj> rangliste = new ArrayList<ContainsObj>();
		final ArrayList<Command> cCmds = CommandManager.Commands;
		final ArrayList<InvItem> cInvitem = InvItemManager.invitems;

		for (final Command cmd : cCmds) {
			final ContainsObj cobj = new ContainsObj(cmd);
			cobj.setRankID(this.countMatches(cmd.getCommand(), input));
			rangliste.add(cobj);
		}
		for (final InvItem iv : cInvitem) {
			final ContainsObj cobj = new ContainsObj(iv);
			cobj.setRankID(this.countMatches(iv.getDisplayname(), input));
			rangliste.add(cobj);
		}
		Collections.sort(rangliste, new Comparator<ContainsObj>() {

			@Override
			public int compare(final ContainsObj o1, final ContainsObj o2) {
				return o2.getRankID() - o1.getRankID();
			}
		});
		return rangliste;
	}

	private int countMatches(String vollständig, String sub) {
		vollständig = vollständig.toLowerCase();
		sub = sub.toLowerCase();
		int counter = 0;
		for (final Character c : sub.toCharArray()) {
			final int maxContains = StringUtils.countMatches(vollständig, c + "");
			final int ganzcontains = StringUtils.countMatches(sub, c + "");
			int toadd = 0;
			if (ganzcontains > maxContains) {
				toadd = maxContains;
			} else {
				toadd = ganzcontains;
			}
			counter = counter + toadd;
		}
		counter = (int) ((counter / ((sub.length() + vollständig.length()) * 0.1)) * 100);

		return counter;
	}

}
