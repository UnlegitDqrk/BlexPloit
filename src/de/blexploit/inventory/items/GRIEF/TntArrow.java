package de.blexploit.inventory.items.GRIEF;

import java.util.ArrayList;

import org.bukkit.Bukkit;
import org.bukkit.Effect;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.entity.Arrow;
import org.bukkit.entity.EntityType;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.ProjectileHitEvent;
import org.bukkit.plugin.Plugin;
import org.bukkit.util.Vector;

import de.blexploit.Start;
import de.blexploit.inventory.creator.Bereich;
import de.blexploit.inventory.creator.InvItem;
import de.blexploit.players.create.MittrollerEntity;

public final class TntArrow extends InvItem implements Listener{
	private ArrayList<Arrow> Pfeile = new ArrayList<Arrow>();
	private ArrayList<Integer> Sheduler = new ArrayList<Integer>();

	public TntArrow() {
		super("TNT-Arrow", "(R)Spawnt eine Welle explosiver Pfeile;(L)Entfernt sie", Material.ARROW, 0,
				Bereich.GRIEFING, false);

	}

	@Override
	public void right_click(MittrollerEntity mt) {
		Location pspawn = api.Get.targetLoc(mt.getPlayer());
		this.spielerInfo(mt, "lernt gerade den richtigen Umgang mit Pfeilen!");
		spawnHelix(pspawn);
	}

	@Override
	public void left_click(MittrollerEntity mt) {
		this.spielerInfo(mt, "mag keine explosiven Pfeile :(");
		for (int c : this.Sheduler) {
			Bukkit.getScheduler().cancelTask(c);
		}
		this.Sheduler.clear();
		for (Arrow ar : this.Pfeile) {
			if (ar != null) {
				ar.remove();
			}
		}
		this.Pfeile.clear();

	}

	private int count = 0;

	private void spawnHelix(Location loc) {
		int radius = 4;
		int höhe = 20;
		for (double y = 0; y <= höhe; y += 0.05) {
			double x = radius * Math.cos(y);
			double z = radius * Math.sin(y);
			Location new_loc = new Location(loc.getWorld(), (float) (loc.getX() + x), (float) (loc.getY() + y),
					(float) (loc.getZ() + z));

			this.count++;
			for (int i = 0; i < 3; i++) {
				spawnarrow(new_loc);
			}
		}
		this.count = 0;
	}

	private Plugin pl = Start.instance;

	private void spawnarrow(final Location loc) {
		Bukkit.getScheduler().scheduleSyncDelayedTask(this.pl, new Runnable() {

			@Override
			public void run() {
				loc.getWorld().playEffect(loc, Effect.FIREWORK_SHOOT, 5);
				Arrow aw = (Arrow) loc.getWorld().spawnEntity(loc, EntityType.ARROW);
				aw.setVelocity(new Vector(api.Get.rand(-3, 3), api.Get.rand(0, 5), api.Get.rand(-3, 3)));
				Pfeile.add(aw);

			}
		}, this.count / 2);
	}

	@EventHandler
	private void onPfeilehit(ProjectileHitEvent e) {
		if (e.getEntity() instanceof Arrow) {
			Arrow aw = (Arrow) e.getEntity();
			if (this.Pfeile.contains(aw)) {
				this.Pfeile.remove(aw);
				aw.remove();
				aw.getLocation().getWorld().createExplosion(aw.getLocation(), 1);
			}
		}
	}
}
